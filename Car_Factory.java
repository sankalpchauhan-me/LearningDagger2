// Generated by Dagger (https://google.github.io/dagger).
package me.sankalpchauhan.learningdagger;

import dagger.internal.Factory;
import javax.inject.Provider;

public final class Car_Factory implements Factory<Car> {
  private final Provider<Engine> engineProvider;

  private final Provider<Wheels> wheelProvider;

  public Car_Factory(Provider<Engine> engineProvider, Provider<Wheels> wheelProvider) {
    this.engineProvider = engineProvider;
    this.wheelProvider = wheelProvider;
  }

  @Override
  public Car get() {
    return provideInstance(engineProvider, wheelProvider);
  }

  public static Car provideInstance(
      Provider<Engine> engineProvider, Provider<Wheels> wheelProvider) {
    return new Car(engineProvider.get(), wheelProvider.get());
  }

  public static Car_Factory create(
      Provider<Engine> engineProvider, Provider<Wheels> wheelProvider) {
    return new Car_Factory(engineProvider, wheelProvider);
  }

  public static Car newCar(Engine engine, Wheels wheel) {
    return new Car(engine, wheel);
  }
}
